package com.pm.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.pm.dto.PatientRequestDTO;
import com.pm.dto.PatientResponseDto;
import com.pm.service.PatientService;
import com.pm.validator.CreatePatientValidator;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.groups.Default;

@RestController
@RequestMapping("/patient")
@Tag(name="Patient", description="Patient Controller manages patient")
public class PatientController {

	private PatientService patientService;

	@Autowired
	public PatientController(PatientService patientService) {
		super();
		this.patientService = patientService;
	}

	public PatientController() {
		super();
	}

	@GetMapping
	@Operation(description="Getting Patient")
	public ResponseEntity<List<PatientResponseDto>> getAllPatientList() {
		List<PatientResponseDto> geAllPatients = patientService.geAllPatients();
		return ResponseEntity.ok().body(geAllPatients);
	}

	@PostMapping
	@Operation(description="Adding Patient")
	public ResponseEntity<PatientResponseDto> savePatient(@Validated({Default.class, CreatePatientValidator.class}) @RequestBody PatientRequestDTO patient) {
		PatientResponseDto savePatient = patientService.savePatient(patient);
		return ResponseEntity.ok().body(savePatient);
	}

	@PutMapping
	@Operation(description="Updating Patient")
	public ResponseEntity<PatientResponseDto> updatePatient(@Validated(Default.class) @RequestBody PatientRequestDTO patient) {
		PatientResponseDto updatePatient = patientService.updatePatient(patient);
		return ResponseEntity.ok().body(updatePatient);
	}
	
	public ResponseEntity<Void> deletePatient(String id){
		patientService.deletePatient(id);
		return ResponseEntity.ok().build();
	}
}
